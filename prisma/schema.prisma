generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(USER)  // PRINCIPAL, SELLER ou USER
  createdAt  DateTime  @default(now())
  
  // Relacionamento bidirecional para PRINCIPAL -> SELLERS
  createdSellers User[] @relation("PrincipalToSellers") // Sellers criados pelo principal
  principal      User?  @relation("PrincipalToSellers", fields: [createdBy], references: [id]) // Campo oposto da relação

  // Relacionamento bidirecional para PRINCIPAL -> CLIENTS
  createdClients Client[] @relation("PrincipalToClients") // Clients criados pelo principal
  managedClients Client[] @relation("SellerToClients")    // Clients gerenciados pelo vendedor
  createdTags    Tag[]    @relation("UserTags")           // Tags criadas pelo usuário

  // Relacionamento bidirecional para USER -> PRODUCTS
  createdProducts Product[] @relation("UserToProduct")

  createdBy Int? // ID do principal que criou o seller
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())

  // Relacionamento para múltiplas notas
  notes     Note[]

  // Seller responsible for the client
  sellerId  Int?
  seller    User? @relation("SellerToClients", fields: [sellerId], references: [id])

  // Principal User who initially created this client
  createdBy Int?
  principal User? @relation("PrincipalToClients", fields: [createdBy], references: [id])

  // Many-to-many relationship with tags
  tags      Tag[] @relation("ClientTags")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  clients   Client[] @relation("ClientTags")
  createdBy Int? // Checar se este campo está sendo corretamente usado
  creator   User?    @relation("UserTags", fields: [createdBy], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String   // Conteúdo da nota
  createdAt DateTime @default(now())
  clientId  Int
  client    Client   @relation(fields: [clientId], references: [id]) // Relacionamento com o cliente
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  photo       String?
  createdAt   DateTime @default(now())
  createdBy   Int      // Sem valor padrão
  creator     User     @relation("UserToProduct", fields: [createdBy], references: [id])
}


enum Role {
  PRINCIPAL
  SELLER
  USER
}
